{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setbtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","onChange","toggleMode","htmlFor","defaultProps","TextForm","text","setText","emails","setEmails","heading","value","placeholder","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","newEmail","split","filter","e","includes","console","log","length","navigator","clipboard","writeText","join","Alert","alert","role","typeText","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2NAEe,SAASA,IAGpB,MAA8BC,mBAAS,CACnCC,MAAQ,QACRC,gBAAkB,UAFtB,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAA8BJ,mBAAS,oBAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAoBA,OACI,sBAAKC,UAAU,sBAAsBC,MAAOL,EAA5C,UACI,oBAAII,UAAU,OAAd,sBACA,sBAAKA,UAAU,YAAYE,GAAG,mBAAmBD,MAAOL,EAAxD,UACI,sBAAKI,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,oBAAII,UAAU,mBAAmBE,GAAG,aAApC,SACI,wBAAQF,UAAU,mBAAmBG,KAAK,SAASF,MAAOL,EAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAA9J,iCAIJ,qBAAKM,GAAG,cAAcF,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACI,sBAAKA,UAAU,iBAAf,UACI,8EADJ,6WACua,mDADva,uDAKR,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,oBAAII,UAAU,mBAAmBE,GAAG,aAApC,SACI,wBAAQF,UAAU,6BAA6BG,KAAK,SAASF,MAAOL,EAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAzK,iCAIJ,qBAAKM,GAAG,cAAcF,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,sBAAKA,UAAU,iBAAf,UACI,+EADJ,8WACya,mDADza,uDAKR,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,oBAAII,UAAU,mBAAmBE,GAAG,eAApC,SACI,wBAAQF,UAAU,6BAA6BG,KAAK,SAASF,MAAOL,EAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAA3K,iCAIJ,qBAAKM,GAAG,gBAAgBF,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,sBAAKA,UAAU,iBAAf,UACI,8EADJ,8WACwa,mDADxa,0DAMZ,qBAAKA,UAAU,uBAAuBG,KAAK,SAASC,QA3DzC,WACM,UAAlBR,EAAQF,OACPG,EAAW,CACPH,MAAO,QACPC,gBAAkB,QAClBU,OAAS,oBAEbN,EAAW,uBAGXF,EAAW,CACPH,MAAO,QACPC,gBAAkB,UAEtBI,EAAW,sBA6CX,SAA0ED,O,WCnEvE,SAASQ,EAAOC,GAC3B,OACI,mCACI,qBAAKP,UAAS,yCAAoCO,EAAMC,KAA1C,eAAqDD,EAAMC,MAAzE,SACI,sBAAKR,UAAU,kBAAf,UACI,cAAC,IAAD,CAAMA,UAAU,eAAeS,GAAG,IAAlC,SAAuCF,EAAMG,QAC7C,wBAAQV,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMH,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAA7C,UACI,qBAAIF,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,kBAAkB,eAAa,OAAOS,GAAG,IAAzD,oBAEJ,oBAAIT,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,SAA9B,SAAwCF,EAAMI,iBAGtD,sBAAKX,UAAS,sCAAgD,UAAfO,EAAMC,KAAmB,OAAS,SAAjF,UACI,uBAAOR,UAAU,mBAAmBG,KAAK,WAAWS,SAAYL,EAAMM,WAAYX,GAAG,2BACrF,uBAAOF,UAAU,mBAAmBc,QAAQ,yBAA5C,mBAAyF,UAAfP,EAAMC,KAAmB,SAAW,UAA9G,6BAc5BF,EAAOS,aAAe,CAClBL,MAAO,aACPC,UAAW,mB,YCnCA,SAASK,EAAST,GAC7B,IA6CA,EAAwBd,mBAAS,IAAjC,mBAAOwB,EAAP,KAAaC,EAAb,KACA,EAA4BzB,mBAAS,IAArC,mBAAO0B,EAAP,KAAeC,EAAf,KAEA,OACI,qCACA,sBAAKpB,UAAU,iBAAf,UACI,6BAAKO,EAAMc,UACX,qBAAKrB,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAesB,MAAOL,EAAMM,YAAY,sBAAsBX,SAXvE,SAACY,GACpBN,EAAQM,EAAMC,OAAOH,QAU+FpB,GAAG,QAAQwB,KAAK,QAEhI,wBAAQ1B,UAAS,kBAA4B,UAAfO,EAAMC,KAAmB,YAAc,OAApD,cAAwEJ,QAvD3E,WAClB,IAAIuB,EAAUV,EAAKW,cACnBV,EAAQS,GACRpB,EAAMsB,UAAU,kCAAmC,YAoD/C,kCACA,wBAAQ7B,UAAS,kBAA4B,UAAfO,EAAMC,KAAmB,YAAc,OAApD,cAAwEJ,QAlD3E,WAClB,IAAIuB,EAAUV,EAAKa,cACnBZ,EAAQS,GACRpB,EAAMsB,UAAU,kCAAmC,YA+C/C,kCACA,wBAAQ7B,UAAS,kBAA4B,UAAfO,EAAMC,KAAmB,YAAc,OAApD,cAAwEJ,QA7CxE,WACrBc,EAAQ,IACRE,EAAU,IACVb,EAAMsB,UAAU,6BAA8B,YA0C1C,wBACA,wBAAQ7B,UAAS,kBAA4B,UAAfO,EAAMC,KAAmB,YAAc,OAApD,cAAwEJ,QAxCtE,WACvBgB,EAAU,IACV,IAAIW,EAAWd,EAAKe,MAAM,KAAKC,QAAO,SAAAC,GAAC,OAAKA,EAAEC,SAAS,MAAQD,EAAEC,SAAS,QAC1EC,QAAQC,IAAIN,GACZX,GAAU,SAAAD,GAAM,4BAAQA,GAAR,CAAgBY,OACT,IAApBA,EAASO,OACR/B,EAAMsB,UAAU,kBAAmB,UAEnCtB,EAAMsB,UAAU,kCAAmC,YAgCnD,qCACA,wBAAQ7B,UAAS,kBAA4B,UAAfO,EAAMC,KAAmB,YAAc,OAApD,cAAwEJ,QA7B9E,WAGfmC,UAAUC,UAAUC,UAAUxB,GAC9BV,EAAMsB,UAAU,2BAA4B,YAyBxC,uBACA,wBAAQ7B,UAAS,kBAA4B,UAAfO,EAAMC,KAAmB,YAAc,OAApD,cAAwEJ,QAvBvE,WACtB,IAAIuB,EAAUV,EAAKe,MAAM,QACzBd,EAAQS,EAAQe,KAAK,OAqBjB,oCAEJ,sBAAK1C,UAAU,iBAAf,UACI,mDACA,8BAAoB,IAAhBiB,EAAKqB,OAAe,EAAIrB,EAAKe,MAAM,KAAKM,OAA5C,cAA+E,IAAhBrB,EAAKqB,OAAe,EAAIrB,EAAKqB,OAAS,EAAIrB,EAAKe,MAAM,KAAKM,OAAzH,iBACA,8BAAI,MAAyB,IAAhBrB,EAAKqB,OAAe,EAAIrB,EAAKe,MAAM,KAAKM,QAArD,sBACA,yCACA,4BAAIrB,EAAKqB,OAAS,EAAIrB,EAAO,uDAC7B,4DACA,4BAAIE,EAAOmB,OAAS,EAAInB,EAAOuB,KAAK,KAAO,0BCzExC,SAASC,EAAMpC,GAO1B,OACIA,EAAMqC,OAAS,qBAAK5C,UAAU,iBAAf,SACX,sBAAKA,UAAS,sBAAiBO,EAAMqC,MAAMzC,KAA7B,gCAAiE0C,KAAK,QAApF,UACI,mCARO,SAAC5B,GAChB,IAAI6B,EAAW7B,EAAKa,cACpB,OAAQgB,EAASC,OAAO,GAAGnB,cAAgBkB,EAASE,MAAM,GAMzCC,CAAW1C,EAAMqC,MAAMzC,MAAhC,SADJ,IACwDI,EAAMqC,MAAMM,S,WCsDjEC,MApDf,WAEE,MAAwB1D,mBAAS,SAAjC,mBAAOe,EAAP,KAAa4C,EAAb,KACA,EAA0B3D,mBAAS,MAAnC,mBAAOmD,EAAP,KAAcS,EAAd,KAEMxB,EAAY,SAACyB,EAASnD,GAC1BkD,EAAS,CACPH,IAAKI,EACLnD,KAAMA,IAERoD,YAAW,WACTF,EAAS,QACR,MAiBL,OACE,mCACA,eAAC,IAAD,WACE,cAAC/C,EAAD,CAAQI,MAAM,YAAYC,UAAU,WAAWH,KAAMA,EAAMK,WAjB5C,WACJ,UAATL,GACF4C,EAAQ,QACRI,SAASC,KAAKxD,MAAMN,gBAAkB,UACtC6D,SAASC,KAAKxD,MAAMP,MAAQ,QAC5BmC,EAAU,6BAA8B,aAExCuB,EAAQ,SACRI,SAASC,KAAKxD,MAAMN,gBAAkB,QACtC6D,SAASC,KAAKxD,MAAMP,MAAQ,QAC5BmC,EAAU,8BAA+B,eASzC,sBAAK7B,UAAU,YAAf,UACE,cAAC2C,EAAD,CAAOC,MAAOA,IACd,eAAC,IAAD,WACE,cAAC,IAAD,CAAOc,KAAK,SAAZ,SACE,cAAClE,EAAD,MAEF,cAAC,IAAD,CAAOkE,KAAK,IAAZ,SACE,cAAC1C,EAAD,CAAUK,QAAQ,kCAAkCb,KAAMA,EAAMqB,UAAWA,kBC3CxE8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.736574e4.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color : 'black',\r\n        backgroundColor : 'white'\r\n    });\r\n\r\n    const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toggleMode = () => {\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({\r\n                color: \"white\",\r\n                backgroundColor : \"black\",\r\n                border : \"1px solid white\"\r\n            })\r\n            setbtnText(\"Enable Light Mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: \"black\",\r\n                backgroundColor : \"white\"\r\n            })\r\n            setbtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-3 pb-3\" style={myStyle}>\r\n            <h2 className=\"my-2\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" >\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"btn btn-primary mt-3\" type=\"button\" onClick={toggleMode}>{btnText}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav mr-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                            </li>\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" onChange = {props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >{`${props.mode === \"light\" ? 'Enable' : 'Disable'} Dark Mode`}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Title here\",\r\n    aboutText: \"About Text here\"\r\n}","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text converted to Uppercase !!!\", \"success\" )\r\n    }\r\n    \r\n    const handleLoClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text converted to Lowercase !!!\", \"success\" )\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText('');\r\n        setEmails([]);\r\n        props.showAlert(\"Text cleared from text box\", \"success\" )\r\n    }\r\n\r\n    const handleEmailExtract = () => {\r\n        setEmails([]);\r\n        let newEmail = text.split(\" \").filter(e => (e.includes('@') && e.includes('.')));\r\n        console.log(newEmail);\r\n        setEmails(emails => [...emails, newEmail]);\r\n        if(newEmail.length === 0){\r\n            props.showAlert(\"No emails found\", \"danger\" )\r\n        }else{\r\n            props.showAlert(\"Find the extracted emails below\", \"success\" )\r\n        }\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        // let copiedText = document.getElementById('myBox');\r\n        // copiedText.select();\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text copied to clipboard\", \"success\" )\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    const [emails, setEmails] = useState([]);\r\n\r\n    return (\r\n        <>\r\n        <div className='container my-4'>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} placeholder=\"Enter you text here\" onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className={`btn btn-${props.mode === \"light\" ? \"secondary\" : \"dark\"} mr-1 mb-1`} onClick= {handleUpClick}>Convert to uppercase</button>\r\n            <button className={`btn btn-${props.mode === \"light\" ? \"secondary\" : \"dark\"} mr-1 mb-1`} onClick= {handleLoClick}>Convert to lowercase</button>\r\n            <button className={`btn btn-${props.mode === \"light\" ? \"secondary\" : \"dark\"} mr-1 mb-1`} onClick= {handleClearClick}>Clear text</button>\r\n            <button className={`btn btn-${props.mode === \"light\" ? \"secondary\" : \"dark\"} mr-1 mb-1`} onClick= {handleEmailExtract}>Extract email from text</button>\r\n            <button className={`btn btn-${props.mode === \"light\" ? \"secondary\" : \"dark\"} mr-1 mb-1`} onClick= {handleCopy}>Copy Text</button>\r\n            <button className={`btn btn-${props.mode === \"light\" ? \"secondary\" : \"dark\"} mr-1 mb-1`} onClick= {handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h2>Your text summary</h2>\r\n            <p>{text.length === 0 ? 0 : text.split(\" \").length} words and {text.length === 0 ? 0 : text.length + 1 - text.split(\" \").length} characters</p>\r\n            <p>{0.008 * (text.length === 0 ? 0 : text.split(\" \").length)} Minutes to read</p>\r\n            <h4>Preview</h4>\r\n            <p>{text.length > 0 ? text : \"Enter some text in the text box to preview it here\"}</p>\r\n            <h4>Emails Present in the text</h4>\r\n            <p>{emails.length > 0 ? emails.join(',') : 'No emails found'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading : PropTypes.string.isRequired\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (text) => {\r\n        let typeText = text.toLowerCase();\r\n        return (typeText.charAt(0).toUpperCase() + typeText.slice(1));\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className=\"container my-2\">\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n                <strong>{capitalize(props.alert.type)} : </strong> {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#343a40';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" aboutText=\"About us\" mode={mode} toggleMode={toggleMode} />\n\n      <div className=\"container\">\n        <Alert alert={alert} />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert} />\n          </Route>\n        </Switch>\n\n        {/* <About/> */}\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}